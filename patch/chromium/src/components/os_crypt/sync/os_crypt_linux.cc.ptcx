from ptcx import BasePTC
import re
from typing import Callable, Union

from sourcetypes import cc
from tree_sitter import Node

firstcomment = rb'^(\s*(?://.*\n|/\*[^*]*\*+(?:[^/*][^*]*\*+)*/\s*\n?)+\s*)\n|^'
add:cc = b"""
// import added by chrx
#include "chrx/os_crypt_hook/os_crypt.cc"
"""

def body_replace(text: bytes,root_node:Node, signature: Union[str, bytes], insert_func: Callable[[bytes], str]) -> str:
    if isinstance(signature, str):
        signature = signature.encode("utf-8")
    pattern = re.compile(signature+rb'\s+\{')
    
    for child in root_node.children:
        if child.type == "function_definition":
            function_code = text[child.start_byte:child.end_byte]
            
            if pattern.search(function_code):
                for subchild in child.children:
                    if subchild.type == "compound_statement":
                        start, end = subchild.start_byte, subchild.end_byte
                        matched_text = text[start:end]
                        modified_text = insert_func(matched_text)
                        if isinstance(modified_text, str):
                            modified_text = str.encode("utf-8")
                        updated_text = text[:start] + b"{\n" + modified_text + b"\n}" + text[end:]
                        return updated_text
    raise ValueError(f"Couldn't find signature:{signature}")
    
encrypt:cc=b"""
    if (plaintext.empty()) {
        ciphertext->clear();
        return true;
    }

    return ChrxEncrypt(plaintext, *ciphertext);
"""

decrypt:cc=b"""
    if (ciphertext.empty()) {
        plaintext->clear();
        return true;
    }

    return ChrxDecrypt(*plaintext, ciphertext);
"""

class PTC(BasePTC):
    def patch(self):
        self.insert(firstcomment, lambda s:s+add)
        self.bytes=body_replace(self.bytes,self.tree.root_node,rb'bool\s+OSCryptImpl::EncryptString\s*\(const\s+std::string&\s+plaintext,\s*std::string\*\s+ciphertext\)', lambda s:encrypt)
        self.bytes=body_replace(self.bytes,self.tree.root_node,rb'bool\s+OSCryptImpl::DecryptString\s*\(const\s+std::string&\s+ciphertext,\s*std::string\*\s+plaintext\)', lambda s:decrypt)